
Surelock-failsafe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800040  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800042  00800042  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087b  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055b  00000000  00000000  00000b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d9  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023f  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	ea ea       	ldi	r30, 0xAA	; 170
  2a:	f1 e4       	ldi	r31, 0x41	; 65
  2c:	02 c0       	rjmp	.+4      	; 0x32 <__do_copy_data+0x10>
  2e:	31 91       	ld	r19, Z+
  30:	3d 93       	st	X+, r19
  32:	a2 34       	cpi	r26, 0x42	; 66
  34:	b2 07       	cpc	r27, r18
  36:	d9 f7       	brne	.-10     	; 0x2e <__do_copy_data+0xc>

00000038 <__do_clear_bss>:
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	a2 e4       	ldi	r26, 0x42	; 66
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	01 c0       	rjmp	.+2      	; 0x42 <.do_clear_bss_start>

00000040 <.do_clear_bss_loop>:
  40:	1d 93       	st	X+, r17

00000042 <.do_clear_bss_start>:
  42:	a3 35       	cpi	r26, 0x53	; 83
  44:	b2 07       	cpc	r27, r18
  46:	e1 f7       	brne	.-8      	; 0x40 <.do_clear_bss_loop>
  48:	6f d0       	rcall	.+222    	; 0x128 <main>
  4a:	ad c0       	rjmp	.+346    	; 0x1a6 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <initClock>:
	}
}

uint16_t getAverageCurrent() {
	return newAvgCurrent;
}
  4e:	48 ed       	ldi	r20, 0xD8	; 216
  50:	4c bf       	out	0x3c, r20	; 60
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	46 bf       	out	0x36, r20	; 54
  56:	08 95       	ret

00000058 <initialiseCoilControllerDisable>:
  58:	0a 98       	cbi	0x01, 2	; 1
  5a:	08 95       	ret

0000005c <initialiseFaultIndicator>:
  5c:	09 9a       	sbi	0x01, 1	; 1
  5e:	11 98       	cbi	0x02, 1	; 2
  60:	08 95       	ret

00000062 <initCurrentMeasurement>:
  62:	1b bb       	out	0x1b, r17	; 27
  64:	4d b3       	in	r20, 0x1d	; 29
  66:	48 7f       	andi	r20, 0xF8	; 248
  68:	4d bb       	out	0x1d, r20	; 29
  6a:	4d b3       	in	r20, 0x1d	; 29
  6c:	43 60       	ori	r20, 0x03	; 3
  6e:	4d bb       	out	0x1d, r20	; 29
  70:	ef 9a       	sbi	0x1d, 7	; 29
  72:	08 95       	ret

00000074 <getCurrentValue>:
  74:	ee 9a       	sbi	0x1d, 6	; 29
  76:	ee 99       	sbic	0x1d, 6	; 29
  78:	fe cf       	rjmp	.-4      	; 0x76 <getCurrentValue+0x2>
  7a:	89 b3       	in	r24, 0x19	; 25
  7c:	08 95       	ret

0000007e <movingAvg>:
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	e6 2f       	mov	r30, r22
  88:	f7 2f       	mov	r31, r23
  8a:	ca 5f       	subi	r28, 0xFA	; 250
  8c:	df 4f       	sbci	r29, 0xFF	; 255
  8e:	68 81       	ld	r22, Y
  90:	c6 50       	subi	r28, 0x06	; 6
  92:	d0 40       	sbci	r29, 0x00	; 0
  94:	a8 2f       	mov	r26, r24
  96:	b9 2f       	mov	r27, r25
  98:	a4 0f       	add	r26, r20
  9a:	b1 1f       	adc	r27, r17
  9c:	41 91       	ld	r20, Z+
  9e:	50 81       	ld	r21, Z
  a0:	e1 50       	subi	r30, 0x01	; 1
  a2:	f0 40       	sbci	r31, 0x00	; 0
  a4:	46 0f       	add	r20, r22
  a6:	51 1f       	adc	r21, r17
  a8:	7c 91       	ld	r23, X
  aa:	47 1b       	sub	r20, r23
  ac:	51 0b       	sbc	r21, r17
  ae:	ef 5f       	subi	r30, 0xFF	; 255
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	50 83       	st	Z, r21
  b4:	42 93       	st	-Z, r20
  b6:	6c 93       	st	X, r22
  b8:	cb 5f       	subi	r28, 0xFB	; 251
  ba:	df 4f       	sbci	r29, 0xFF	; 255
  bc:	68 81       	ld	r22, Y
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	81 91       	ld	r24, Z+
  c2:	90 81       	ld	r25, Z
  c4:	5a d0       	rcall	.+180    	; 0x17a <__udivmodhi4>
  c6:	86 2f       	mov	r24, r22
  c8:	97 2f       	mov	r25, r23
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <sampleAverageCurrent>:
  d0:	d1 df       	rcall	.-94     	; 0x74 <getCurrentValue>
  d2:	8f 93       	push	r24
  d4:	40 a1       	lds	r20, 0x40	; 0x800040 <__data_start>
  d6:	4f 93       	push	r20
  d8:	46 a1       	lds	r20, 0x46	; 0x800046 <posCurrent>
  da:	63 e4       	ldi	r22, 0x43	; 67
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	87 e4       	ldi	r24, 0x47	; 71
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	cd df       	rcall	.-102    	; 0x7e <movingAvg>
  e4:	85 a9       	sts	0x45, r24	; 0x800045 <newAvgCurrent>
  e6:	46 a1       	lds	r20, 0x46	; 0x800046 <posCurrent>
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	46 a9       	sts	0x46, r20	; 0x800046 <posCurrent>
  ec:	0f 91       	pop	r16
  ee:	0f 91       	pop	r16
  f0:	50 a1       	lds	r21, 0x40	; 0x800040 <__data_start>
  f2:	45 17       	cp	r20, r21
  f4:	08 f0       	brcs	.+2      	; 0xf8 <sampleAverageCurrent+0x28>
  f6:	16 a9       	sts	0x46, r17	; 0x800046 <posCurrent>
  f8:	08 95       	ret

000000fa <isOverCurrent>:
		posCurrent = 0;
	}
}

uint16_t getAverageCurrent() {
	return newAvgCurrent;
  fa:	45 a1       	lds	r20, 0x45	; 0x800045 <newAvgCurrent>
bool isOverCurrent( void ) {
	
uint8_t current = getAverageCurrent();
bool ret = false;

    if ( current >= OVER_CURRENT_VALUE )
  fc:	45 35       	cpi	r20, 0x55	; 85
  fe:	20 f0       	brcs	.+8      	; 0x108 <__DATA_REGION_LENGTH__+0x8>
    {
	    ret = true;
	    currentHigh = true;
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	42 a9       	sts	0x42, r20	; 0x800042 <__data_end>
uint8_t current = getAverageCurrent();
bool ret = false;

    if ( current >= OVER_CURRENT_VALUE )
    {
	    ret = true;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
	    currentHigh = true;
    }
    else if ( current <= (OVER_CURRENT_VALUE - HYSTERYSIS) )
 108:	42 35       	cpi	r20, 0x52	; 82
 10a:	18 f4       	brcc	.+6      	; 0x112 <__DATA_REGION_LENGTH__+0x12>
    {
	    ret = false;
	    currentHigh = false;
 10c:	12 a9       	sts	0x42, r17	; 0x800042 <__data_end>
	    ret = true;
	    currentHigh = true;
    }
    else if ( current <= (OVER_CURRENT_VALUE - HYSTERYSIS) )
    {
	    ret = false;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
	    currentHigh = false;
    }
    else if ( (current < OVER_CURRENT_VALUE)
 112:	42 55       	subi	r20, 0x52	; 82
 114:	43 30       	cpi	r20, 0x03	; 3
 116:	30 f4       	brcc	.+12     	; 0x124 <__DATA_REGION_LENGTH__+0x24>
uint8_t current = getAverageCurrent();
bool ret = false;

    if ( current >= OVER_CURRENT_VALUE )
    {
	    ret = true;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	42 a1       	lds	r20, 0x42	; 0x800042 <__data_end>
 11c:	41 13       	cpse	r20, r17
 11e:	03 c0       	rjmp	.+6      	; 0x126 <__DATA_REGION_LENGTH__+0x26>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
bool currentHigh = false;

bool isOverCurrent( void ) {
	
uint8_t current = getAverageCurrent();
bool ret = false;
 124:	80 e0       	ldi	r24, 0x00	; 0
			ret = true;  
	    else
			ret = false;   
	}
	return ret;
}
 126:	08 95       	ret

00000128 <main>:
int main(void)
{
	uint16_t timer = 0;
	bool faultState = false;
	
	initClock();
 128:	92 df       	rcall	.-220    	; 0x4e <initClock>
	initialiseCoilControllerDisable();
 12a:	96 df       	rcall	.-212    	; 0x58 <initialiseCoilControllerDisable>
	initialiseFaultIndicator();
 12c:	97 df       	rcall	.-210    	; 0x5c <initialiseFaultIndicator>
	initCurrentMeasurement();
 12e:	99 df       	rcall	.-206    	; 0x62 <initCurrentMeasurement>


int main(void)
{
	uint16_t timer = 0;
	bool faultState = false;
 130:	30 e0       	ldi	r19, 0x00	; 0
}


int main(void)
{
	uint16_t timer = 0;
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
	initialiseFaultIndicator();
	initCurrentMeasurement();

    while (1) 
    {
		if (!faultState) {
 136:	31 13       	cpse	r19, r17
 138:	17 c0       	rjmp	.+46     	; 0x168 <main+0x40>
			if (isOverCurrent()) {
 13a:	df df       	rcall	.-66     	; 0xfa <isOverCurrent>
 13c:	88 23       	and	r24, r24
 13e:	71 f0       	breq	.+28     	; 0x15c <main+0x34>
				if (timer++ >= OVER_CURRENT_TIME_BEFORE_TRIP) {
 140:	4c 2f       	mov	r20, r28
 142:	5d 2f       	mov	r21, r29
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	c8 3e       	cpi	r28, 0xE8	; 232
 14a:	d3 40       	sbci	r29, 0x03	; 3
 14c:	58 f0       	brcs	.+22     	; 0x164 <main+0x3c>
inline void setB0() {PORTB |= 1<<PORTB0;}
inline void clearB0() {PORTB &= ~(1<<PORTB0);}
inline void setOutputB0() {DDRB |= 1<<DDB0;}
inline void setInputB0() {DDRB &= ~(1<<DDB0);}
inline void setPUB0() {PUEB |= 1<<PUEB0;}
inline void setB1() {PORTB |= 1<<PORTB1;}
 14e:	11 9a       	sbi	0x02, 1	; 2
inline void clearB1() {PORTB &= ~(1<<PORTB1);}
inline void setOutputB1() {DDRB |= 1<<DDB1;}
inline void setInputB1() {DDRB &= ~(1<<DDB1);}
inline void setPUB1() {PUEB |= 1<<PUEB1;}
inline void setB2() {PORTB |= 1<<PORTB2;}
inline void clearB2() {PORTB &= ~(1<<PORTB2);}
 150:	12 98       	cbi	0x02, 2	; 2
inline bool getB2() {return ((PINB>>PINB2) & 1); }
inline void setOutputB2() {DDRB |= 1<<DDB2;}
 152:	0a 9a       	sbi	0x01, 2	; 1

    while (1) 
    {
		if (!faultState) {
			if (isOverCurrent()) {
				if (timer++ >= OVER_CURRENT_TIME_BEFORE_TRIP) {
 154:	c4 2f       	mov	r28, r20
 156:	d5 2f       	mov	r29, r21
					indicateFault();
					disableCoilController();
					faultState = true;
 158:	31 e0       	ldi	r19, 0x01	; 1
 15a:	06 c0       	rjmp	.+12     	; 0x168 <main+0x40>
inline void clearB0() {PORTB &= ~(1<<PORTB0);}
inline void setOutputB0() {DDRB |= 1<<DDB0;}
inline void setInputB0() {DDRB &= ~(1<<DDB0);}
inline void setPUB0() {PUEB |= 1<<PUEB0;}
inline void setB1() {PORTB |= 1<<PORTB1;}
inline void clearB1() {PORTB &= ~(1<<PORTB1);}
 15c:	11 98       	cbi	0x02, 1	; 2
					faultState = true;
				}
			}
			else {
				resetFaultIndicator();
				timer = 0;
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x40>

    while (1) 
    {
		if (!faultState) {
			if (isOverCurrent()) {
				if (timer++ >= OVER_CURRENT_TIME_BEFORE_TRIP) {
 164:	c4 2f       	mov	r28, r20
 166:	d5 2f       	mov	r29, r21
			else {
				resetFaultIndicator();
				timer = 0;
			}
		}
		sampleAverageCurrent();
 168:	b3 df       	rcall	.-154    	; 0xd0 <sampleAverageCurrent>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	47 ee       	ldi	r20, 0xE7	; 231
 16c:	53 e0       	ldi	r21, 0x03	; 3
 16e:	41 50       	subi	r20, 0x01	; 1
 170:	50 40       	sbci	r21, 0x00	; 0
 172:	e9 f7       	brne	.-6      	; 0x16e <main+0x46>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x4e>
 176:	00 00       	nop
 178:	de cf       	rjmp	.-68     	; 0x136 <main+0xe>

0000017a <__udivmodhi4>:
 17a:	aa 1b       	sub	r26, r26
 17c:	bb 1b       	sub	r27, r27
 17e:	51 e1       	ldi	r21, 0x11	; 17
 180:	07 c0       	rjmp	.+14     	; 0x190 <__udivmodhi4_ep>

00000182 <__udivmodhi4_loop>:
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	a6 17       	cp	r26, r22
 188:	b7 07       	cpc	r27, r23
 18a:	10 f0       	brcs	.+4      	; 0x190 <__udivmodhi4_ep>
 18c:	a6 1b       	sub	r26, r22
 18e:	b7 0b       	sbc	r27, r23

00000190 <__udivmodhi4_ep>:
 190:	88 1f       	adc	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	5a 95       	dec	r21
 196:	a9 f7       	brne	.-22     	; 0x182 <__udivmodhi4_loop>
 198:	80 95       	com	r24
 19a:	90 95       	com	r25
 19c:	68 2f       	mov	r22, r24
 19e:	79 2f       	mov	r23, r25
 1a0:	8a 2f       	mov	r24, r26
 1a2:	9b 2f       	mov	r25, r27
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
